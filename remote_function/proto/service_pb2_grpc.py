# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from remote_function.proto import service_pb2 as service__pb2


class ServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sayPublic = channel.unary_unary(
                '/Service/sayPublic',
                request_serializer=service__pb2.sayRequest.SerializeToString,
                response_deserializer=service__pb2.sayResponse.FromString,
                )
        self.sayUser = channel.unary_unary(
                '/Service/sayUser',
                request_serializer=service__pb2.sayRequest.SerializeToString,
                response_deserializer=service__pb2.sayResponse.FromString,
                )
        self.sayAdmin = channel.unary_unary(
                '/Service/sayAdmin',
                request_serializer=service__pb2.sayRequest.SerializeToString,
                response_deserializer=service__pb2.sayResponse.FromString,
                )
        self.sayUnaryStream = channel.unary_stream(
                '/Service/sayUnaryStream',
                request_serializer=service__pb2.sayRequest.SerializeToString,
                response_deserializer=service__pb2.sayResponse.FromString,
                )
        self.sayStreamUnary = channel.stream_unary(
                '/Service/sayStreamUnary',
                request_serializer=service__pb2.sayRequest.SerializeToString,
                response_deserializer=service__pb2.sayResponse.FromString,
                )
        self.sayStreamStream = channel.stream_stream(
                '/Service/sayStreamStream',
                request_serializer=service__pb2.sayRequest.SerializeToString,
                response_deserializer=service__pb2.sayResponse.FromString,
                )


class ServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def sayPublic(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sayUser(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sayAdmin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sayUnaryStream(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sayStreamUnary(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sayStreamStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sayPublic': grpc.unary_unary_rpc_method_handler(
                    servicer.sayPublic,
                    request_deserializer=service__pb2.sayRequest.FromString,
                    response_serializer=service__pb2.sayResponse.SerializeToString,
            ),
            'sayUser': grpc.unary_unary_rpc_method_handler(
                    servicer.sayUser,
                    request_deserializer=service__pb2.sayRequest.FromString,
                    response_serializer=service__pb2.sayResponse.SerializeToString,
            ),
            'sayAdmin': grpc.unary_unary_rpc_method_handler(
                    servicer.sayAdmin,
                    request_deserializer=service__pb2.sayRequest.FromString,
                    response_serializer=service__pb2.sayResponse.SerializeToString,
            ),
            'sayUnaryStream': grpc.unary_stream_rpc_method_handler(
                    servicer.sayUnaryStream,
                    request_deserializer=service__pb2.sayRequest.FromString,
                    response_serializer=service__pb2.sayResponse.SerializeToString,
            ),
            'sayStreamUnary': grpc.stream_unary_rpc_method_handler(
                    servicer.sayStreamUnary,
                    request_deserializer=service__pb2.sayRequest.FromString,
                    response_serializer=service__pb2.sayResponse.SerializeToString,
            ),
            'sayStreamStream': grpc.stream_stream_rpc_method_handler(
                    servicer.sayStreamStream,
                    request_deserializer=service__pb2.sayRequest.FromString,
                    response_serializer=service__pb2.sayResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Service', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Service(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def sayPublic(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Service/sayPublic',
            service__pb2.sayRequest.SerializeToString,
            service__pb2.sayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sayUser(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Service/sayUser',
            service__pb2.sayRequest.SerializeToString,
            service__pb2.sayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sayAdmin(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Service/sayAdmin',
            service__pb2.sayRequest.SerializeToString,
            service__pb2.sayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sayUnaryStream(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/Service/sayUnaryStream',
            service__pb2.sayRequest.SerializeToString,
            service__pb2.sayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sayStreamUnary(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/Service/sayStreamUnary',
            service__pb2.sayRequest.SerializeToString,
            service__pb2.sayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def sayStreamStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/Service/sayStreamStream',
            service__pb2.sayRequest.SerializeToString,
            service__pb2.sayResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
